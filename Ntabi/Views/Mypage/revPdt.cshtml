@using Ntabi.Models
@using System.Globalization;

@{
    Layout = "~/Views/Shared/_Layout.cshtml";

    string userAgent = Request.UserAgent;
    string[] browser = { "iphone", "ipod", "ipad", "android", "blackberry", "windows ce", "nokia", "webos", "opera mini", "sonyericsson", "opera mobi", "iemobile", "windows phone" };
    bool isMobile = false;

    for (int iasd = 0; iasd < browser.Length; iasd++)
    {
        if (userAgent.ToLower().Contains(browser[iasd]))
        {
            isMobile = true;
            break;
        }
    }

    var user = Session["user"] as User;

    string revDay = "",
           revSeq = "",
           revStartDay = "",
           revEndDay = "",
           pdtTitle = "",
           pdtContent = "",
           empName = "",
           empTel = "",
           empMail = "",
           revState = "",
           revStateTxt = "",
           revName = "",
           revPCnt = "",
           revContent = "",
           cntTxt = "",
           revPrice = "",
           pdtCode = "",
           dayCode = "",
           vcImg = "mypageti.png",
           sTit = "",
           eTit = "";

    string dayCodeTxt = "";

    foreach (object item in Model)
    {
        revDay = "";
        revSeq = "";
        revStartDay = "";
        revEndDay = "";
        pdtTitle = "";
        pdtContent = "";
        empName = "";
        empTel = "";
        empMail = "";
        revState = "";
        revName = "";
        revPCnt = "";
        revContent = "";
        revPrice = "";
        pdtCode = "";
        revStateTxt = "";
        dayCode = "";
        sTit = "";
        eTit = "";

        try { revDay = item.GetType().GetProperties()[0].GetValue(item, null).ToString(); }
        catch { continue; }
        try { revSeq = item.GetType().GetProperties()[1].GetValue(item, null).ToString(); }
        catch { continue; }
        try { revStartDay = item.GetType().GetProperties()[2].GetValue(item, null).ToString(); }
        catch { continue; }
        try { pdtTitle = item.GetType().GetProperties()[3].GetValue(item, null).ToString(); }
        catch { continue; }
        try { pdtContent = item.GetType().GetProperties()[4].GetValue(item, null).ToString(); }
        catch { continue; }
        try { empName = item.GetType().GetProperties()[5].GetValue(item, null).ToString(); }
        catch { continue; }
        try { empTel = item.GetType().GetProperties()[6].GetValue(item, null).ToString(); }
        catch { continue; }
        try { empMail = item.GetType().GetProperties()[7].GetValue(item, null).ToString(); }
        catch { continue; }
        try { revState = item.GetType().GetProperties()[8].GetValue(item, null).ToString(); }
        catch { continue; }
        try { revName = item.GetType().GetProperties()[9].GetValue(item, null).ToString(); }
        catch { continue; }
        try { revPCnt = item.GetType().GetProperties()[10].GetValue(item, null).ToString(); }
        catch { continue; }
        try { revContent = item.GetType().GetProperties()[11].GetValue(item, null).ToString(); }
        catch { }
        try { revPrice = item.GetType().GetProperties()[12].GetValue(item, null).ToString(); }
        catch { }
        try { pdtCode = item.GetType().GetProperties()[13].GetValue(item, null).ToString(); }
        catch { }
        try { dayCode = item.GetType().GetProperties()[14].GetValue(item, null).ToString(); }
        catch { }
        try { sTit = item.GetType().GetProperties()[15].GetValue(item, null).ToString(); }
        catch { }
        try { eTit = item.GetType().GetProperties()[16].GetValue(item, null).ToString(); }
        catch { }

        if (string.IsNullOrEmpty(revContent))
        {
            revContent = "-";
        }

        DateTime dt = DateTime.ParseExact(revStartDay, "yyyy-MM-dd", CultureInfo.InvariantCulture);

        switch (dt.DayOfWeek)
        {
            case DayOfWeek.Monday:
                revStartDay += " (월)";
                break;
            case DayOfWeek.Tuesday:
                revStartDay += " (화)";
                break;
            case DayOfWeek.Wednesday:
                revStartDay += " (수)";
                break;
            case DayOfWeek.Thursday:
                revStartDay += " (목)";
                break;
            case DayOfWeek.Friday:
                revStartDay += " (금)";
                break;
            case DayOfWeek.Saturday:
                revStartDay += " (토)";
                break;
            case DayOfWeek.Sunday:
                revStartDay += " (일)";
                break;
        }

        dt = dt.AddDays(Convert.ToInt32(dayCode.Substring(2)) - 1);

        revEndDay = dt.ToString("yyyy-MM-dd");

        switch (dt.DayOfWeek)
        {
            case DayOfWeek.Monday:
                revEndDay += " (월)";
                break;
            case DayOfWeek.Tuesday:
                revEndDay += " (화)";
                break;
            case DayOfWeek.Wednesday:
                revEndDay += " (수)";
                break;
            case DayOfWeek.Thursday:
                revEndDay += " (목)";
                break;
            case DayOfWeek.Friday:
                revEndDay += " (금)";
                break;
            case DayOfWeek.Saturday:
                revEndDay += " (토)";
                break;
            case DayOfWeek.Sunday:
                revEndDay += " (일)";
                break;
        }

        switch (revState)
        {
            case "10":
                revStateTxt = "<span style='color: red;'>예약 취소</span>";
                break;
            case "20":
                revStateTxt = "<span style='color: #01790d;'>예약 확인중</span>";
                break;
            case "30":
                revStateTxt = "<span style='color: #960ce8;'>예약 진행중</span>";
                break;
            case "40":
                vcImg = "mypageti_ok.png";
                revStateTxt = "<span style='color: #f84a0d;'>출발 확정</span>";
                break;
            case "50":
                revStateTxt = "<span style='color: blue;'>완료</span>";
                break;
        }

        cntTxt = revName;

        if (Convert.ToInt32(revPCnt) > 1)
        {
            cntTxt += "외 " + (Convert.ToInt32(revPCnt) - 1) + "명";
        }

        switch (dayCode.Substring(2, 2))
        {
            case "01":
                dayCodeTxt = "당일치기";
                break;
            case "02":
                dayCodeTxt = "1박 2일";
                break;
            case "03":
                dayCodeTxt = "2박 3일";
                break;
            case "04":
                dayCodeTxt = "3박 4일";
                break;
            case "05":
                dayCodeTxt = "4박 5일";
                break;
            case "06":
                dayCodeTxt = "5박 6일";
                break;
            case "07":
                dayCodeTxt = "6박 7일";
                break;
            case "08":
                dayCodeTxt = "7박 8일";
                break;
            case "09":
                dayCodeTxt = "8박 9일";
                break;
            case "10":
                dayCodeTxt = "9박 10일";
                break;
        }
    }
}

<style>
    div#container > article > section.revPdt {
        padding-top: 10px;
        max-width: none;
    }

        div#container > article > section.revPdt > * {
            display: block;
            max-width: 1200px;
            margin: 0 auto;
        }

    section.revPdt > h3 {
        font-size: 14px;
        color: #2a2a2a;
    }

    section.revPdt ul {
        padding: 0;
        margin: 0;
        list-style: none;
        font-size: 0;
        overflow: hidden;
    }

        section.revPdt ul.lists {
            text-align: center;
        }

            section.revPdt ul.lists > li {
                margin: 0;
                padding: 0 19px;
                position: relative;
                display: inline-block;
            }

                section.revPdt ul.lists > li:before {
                    content: '';
                    border-right: 1px solid #777;
                    display: block;
                    position: absolute;
                    top: 4px;
                    bottom: 2px;
                    left: 0;
                }

                section.revPdt ul.lists > li:first-child:before {
                    display: none;
                }

                section.revPdt ul.lists > li > a {
                    color: #9f9f9f;
                    font-size: 16px;
                }

                section.revPdt ul.lists > li.on > a {
                    color: #101010;
                }

    section.revPdt div.revData > ul,
    section.revPdt div.revCnt > ul > li > ul {
        margin-top: 20px;
        border-bottom: 1px solid #ddd;
    }

        section.revPdt div.revCnt > ul > li > ul > li {
            float: left;
            width: 33.33%;
        }

        section.revPdt div.revData > ul > li,
        section.revPdt div.revCnt > ul > li > ul > li {
            display: inline-block;
            border-top: 1px solid #ddd;
        }

    section.revPdt li.leftBorder {
        border-left: 1px solid #ddd;
    }

    section.revPdt div.revData > ul > li > p,
    section.revPdt div.revCnt > ul > li > ul > li > p {
        margin: 0;
        font-size: 15px;
        color: #6d6d6d;
        text-align: center;
        line-height: 50px;
    }

        section.revPdt div.revData > ul > li > p > span,
        section.revPdt div.revCnt > ul > li > ul > li > p > span {
            float: right;
            border-left: 1px solid #ddd;
            padding-left: 20px;
            text-align: left;
            color: #1f1f1f;
        }

    section.revPdt div.revData > ul > li.revName > p {
        width: 300px;
    }

    section.revPdt div.revData > ul > li.sDate > p,
    section.revPdt div.revData > ul > li.eDate > p {
        width: 449px;
    }

    section.revPdt div.revData > ul > li.pdtName > p,
    section.revPdt div.revData > ul > li.request > p,
    section.revPdt div.revData > ul > li.emp > p {
        width: 1200px;
    }

    section.revPdt div.revData > ul > li.schedule > p {
        width: 400px;
    }

    section.revPdt div.revData > ul > li.city > p,
    section.revPdt div.revData > ul > li.process > p {
        width: 399px;
    }

    section.revPdt div.revData > ul > li.revName > p > span {
        width: 200px;
    }

    section.revPdt div.revData > ul > li.sDate > p > span,
    section.revPdt div.revData > ul > li.eDate > p > span {
        width: 349px;
    }

    section.revPdt div.revData > ul > li.pdtName > p > span,
    section.revPdt div.revData > ul > li.request > p > span,
    section.revPdt div.revData > ul > li.emp > p > span {
        width: 1100px;
    }

    section.revPdt div.revData > ul > li.schedule > p > span {
        width: 300px;
    }

    section.revPdt div.revData > ul > li.city > p > span,
    section.revPdt div.revData > ul > li.process > p > span {
        width: 299px;
    }

    section.revPdt div.revData > ul > li.sDate > p > span > span.cord,
    section.revPdt div.revData > ul > li.eDate > p > span > span.cord {
        font-size: 14px;
        margin-right: 5px;
    }

    section.revPdt div.revData > ul > li.pdtName > p > span > span {
        float: right;
        margin-right: 20px;
    }

    div#container > article > section.revPdt div {
        margin-bottom: 30px;
    }

        div#container > article > section.revPdt div.revCnt {
            max-width: none;
            padding: 50px 0;
            background-color: #fdfefa;
            text-align: center;
        }

    section.revPdt div.revCnt > ul {
        max-width: 1200px;
        margin: 0 auto;
    }

        section.revPdt div.revCnt > ul > li > ul > li > p {
            width: 300px;
        }

        section.revPdt div.revCnt > ul > li > ul > li.leftBorder > p {
            width: 299px;
        }

        section.revPdt div.revCnt > ul > li > ul > li > p > span {
            width: 200px;
        }

        section.revPdt div.revCnt > ul > li > ul > li.leftBorder > p > span {
            width: 199px;
        }

    div#container > article > section.revPdt div.account {
        text-align: center;
        margin-top: 35px;
    }

    section.revPdt div.account > ul {
        margin-top: 20px;
        border-bottom: 1px solid #ddd;
    }

        section.revPdt div.account > ul > li {
            display: inline-block;
            border-top: 1px solid #ddd;
        }

            section.revPdt div.account > ul > li > p {
                margin: 0;
                font-size: 15px;
                color: #6d6d6d;
                text-align: center;
                line-height: 30px;
            }

            section.revPdt div.account > ul > li.options > p {
                width: 950px;
            }

            section.revPdt div.account > ul > li.revCnt > p {
                width: 249px;
            }

            section.revPdt div.account > ul > li > p > span {
                float: right;
                border-left: 1px solid #ddd;
                padding: 5px 0;
                padding-left: 20px;
                text-align: left;
                color: #1f1f1f;
            }

            section.revPdt div.account > ul > li.options > p > span {
                width: 850px;
            }

            section.revPdt div.account > ul > li.revCnt > p > span {
                width: 150px;
            }

    div#container > article > section.revPdt div.total {
        max-width: none;
        line-height: 50px;
        background-color: #fdfefa;
    }

    section.revPdt div.total > p {
        max-width: 1200px;
        margin: 0 auto;
        font-size: 16px;
        color: #2a2a2a;
        padding: 0 20px;
    }

        section.revPdt div.total > p > span {
            float: right;
        }

            section.revPdt div.total > p > span > span {
                font-size: 24px;
                color: #ef3e23;
            }

    div#container > article > section.revPdt div.record {
        margin-top: 50px;
    }

    section.revPdt div.record th {
        font-size: 15px;
        color: #4e4e4e;
        text-align: center;
        line-height: 42px;
        background-color: #f3f8e9;
        padding: 0;
    }

    section.revPdt div.record td {
        font-size: 14px;
        color: #2a2a2a;
        padding: 0;
        line-height: 38px;
        text-align: center;
        border: none;
    }

    section.revPdt div.rTotal > ul {
        width: 1200px;
        margin: 0 auto;
        padding: 40px 0;
    }

        section.revPdt div.rTotal > ul > li {
            width: 600px;
            display: inline-block;
        }

            section.revPdt div.rTotal > ul > li > p {
                margin: 0;
                font-size: 15px;
                padding: 0 30px;
            }

                section.revPdt div.rTotal > ul > li > p > span {
                    float: right;
                }

                    section.revPdt div.rTotal > ul > li > p > span > span {
                        font-size: 20px;
                    }

    div#container > article > section.revPdt div.payment {
        margin-top: 80px;
        padding: 0 30px;
    }

        div#container > article > section.revPdt div.payment > form > p.checkPay {
            font-size: 15px;
            color: #2a2a2a;
            margin: 0;
        }

            div#container > article > section.revPdt div.payment > form > p.checkPay > span {
                float: right;
            }

                div#container > article > section.revPdt div.payment > form > p.checkPay > span > label {
                    margin: 0 13px
                }

        div#container > article > section.revPdt div.payment > form > p.accessPay {
            margin: 30px 0 0;
            text-align: right;
        }

            div#container > article > section.revPdt div.payment > form > p.accessPay > input {
                border: none;
                border-bottom: 1px solid #ddd;
            }

            div#container > article > section.revPdt div.payment > form > p.accessPay > button {
                width: 95px;
                height: 30px;
                background-color: #f2f8e9;
                border: 0;
            }

    div#container > article > section.revPdt div.accountTransfer {
        width: 1000px;
        padding: 10px 0;
        font-size: 15px;
        border: 1px solid #ddd;
    }

        div#container > article > section.revPdt div.accountTransfer p {
            display: inline-block;
            margin: 0 15px;
            font-size: 17px;
            letter-spacing: -0.5px;
        }

            div#container > article > section.revPdt div.accountTransfer p.accountHolder {
                position: relative;
                font-size: 15px;
            }

                div#container > article > section.revPdt div.accountTransfer p.accountHolder:after {
                    display: block;
                    content: "";
                    position: absolute;
                    top: 3px;
                    right: -19px;
                    width: 1px;
                    height: 14px;
                    background-color: #666;
                }

    .nav-tabs > li {
        font-size: 15px;
    }
</style>

<section class="revPdt">
    <h3>마이페이지 > 예약/결제내역</h3>

    <ul class="lists">
        <li class="on">
            <a href="/Mypage">예약/결제내역</a>
        </li>
        @*
        <li>
            <a href="/Mypage/LikePdt">찜한상품</a>
        </li>*@
        <li>
            <a href="/Mypage/MyBoard">내가쓴글</a>
        </li>
        <li>
            <a href="/Mypage/MyInfo">정보수정</a>
        </li>
    </ul>

    <div class="revData">
        <h4 class="sr-only sr-only-focusable">예약 정보</h4>

        <ul>
            <li class="revName">
                <p>
                    예약자
                    <span>
                        @revName
                    </span>
                </p>
            </li>
            <li class="sDate leftBorder">
                <p>
                    출발일
                    <span>
                        <span class="cord">[@sTit]</span>
                        @revStartDay
                    </span>
                </p>
            </li>
            <li class="eDate leftBorder">
                <p>
                    리턴일
                    <span>
                        <span class="cord">[@eTit]</span>
                        @revEndDay
                    </span>
                </p>
            </li>
            <li class="pdtName">
                <p>
                    상품명
                    <span>
                        @pdtTitle
                        <span>@pdtCode</span>
                    </span>
                </p>
            </li>
            <li class="schedule">
                <p>
                    여행일정
                    <span>
                        @dayCodeTxt
                    </span>
                </p>
            </li>
            <li class="city leftBorder">
                <p>
                    출발지
                    <span>
                        부산
                    </span>
                </p>
            </li>
            <li class="process leftBorder">
                <p>
                    진행상태
                    <span class="rev3">
                        @MvcHtmlString.Create(revStateTxt)
                    </span>
                </p>
            </li>
            <li class="emp">
                <p>
                    담당자
                    <span>
                        @empName | @empTel | @empMail
                    </span>
                </p>
            </li>
            <li class="request">
                <p>
                    요청사항
                    <span>
                        @revContent
                    </span>
                </p>
            </li>
        </ul>
    </div>

    <div class="revCnt">
        <h4>예약 인원 <span>총 @revPCnt 명</span></h4>

        <ul>


            @{
            string CU_NAME = "",
            CU_NAME_LAST = "",
            CU_NAME_FIRST = "",
            CU_GB = "",
            CU_SEX = "",
            CU_TEL = "",
            CU_BIRTH = "";

            int ACnt = 0,
            CCnt = 0,
            BCnt = 0;

            foreach (object item in ViewBag.tourData)
            {
            CU_NAME = "";
            CU_NAME_LAST = "";
            CU_NAME_FIRST = "";
            CU_GB = "";
            CU_SEX = "";
            CU_TEL = "";
            CU_BIRTH = "";

            try { CU_NAME       = item.GetType().GetProperties()[0].GetValue(item, null).ToString(); } catch { }
            try { CU_NAME_LAST  = item.GetType().GetProperties()[1].GetValue(item, null).ToString(); } catch { }
            try { CU_NAME_FIRST = item.GetType().GetProperties()[2].GetValue(item, null).ToString(); } catch { }
            try { CU_GB         = item.GetType().GetProperties()[3].GetValue(item, null).ToString(); } catch { }
            try { CU_SEX        = item.GetType().GetProperties()[4].GetValue(item, null).ToString(); } catch { }
            try { CU_BIRTH      = item.GetType().GetProperties()[5].GetValue(item, null).ToString(); } catch { }
            try { CU_TEL        = item.GetType().GetProperties()[6].GetValue(item, null).ToString(); } catch { }

            CU_NAME         = string.IsNullOrEmpty(CU_NAME) ? " - " : CU_NAME;
            CU_NAME_LAST    = string.IsNullOrEmpty(CU_NAME_LAST) ? " - " : CU_NAME_LAST;
            CU_NAME_FIRST   = string.IsNullOrEmpty(CU_NAME_FIRST) ? " - " : CU_NAME_FIRST;
            CU_GB           = string.IsNullOrEmpty(CU_GB) ? " - " : CU_GB;
            CU_SEX          = string.IsNullOrEmpty(CU_SEX) ? " - " : CU_SEX;
            CU_BIRTH        = string.IsNullOrEmpty(CU_BIRTH) ? " - " : CU_BIRTH;
            CU_TEL          = string.IsNullOrEmpty(CU_TEL) ? " - " : CU_TEL;

            switch(CU_GB)
            {
            case "A":
            CU_GB = "성인";
            ACnt++;
            break;
            case "C":
            CU_GB = "소아";
            CCnt++;
            break;
            case "B":
            CU_GB = "유아";
            BCnt++;
            break;
            }

            switch (CU_SEX)
            {
            case "M":
            CU_SEX = "남자";
            break;
            case "F":
            CU_SEX = "여자";
            break;
            }

            <li>
                <ul>
                    <li>
                        <p>
                            한글 이름
                            <span>
                                @CU_NAME
                            </span>
                        </p>
                    </li>
                    <li class="leftBorder">
                        <p>
                            영문 이름
                            <span>
                                @CU_NAME_LAST @CU_NAME_FIRST
                            </span>
                        </p>
                    </li>
                    <li class="leftBorder">
                        <p>
                            전화번호
                            <span>
                                @CU_TEL
                            </span>
                        </p>
                    </li>
                    <li>
                        <p>
                            생년월일
                            <span>
                                @CU_BIRTH
                            </span>
                        </p>
                    </li>
                    <li class="leftBorder">
                        <p>
                            구분
                            <span>
                                @CU_GB
                            </span>
                        </p>
                    </li>
                    <li class="leftBorder">
                        <p>
                            성별
                            <span>
                                @CU_SEX
                            </span>
                        </p>
                    </li>
                </ul>
            </li>
            }
            }

        </ul>
    </div>

    <div class="account">
        <h4>결제 정보</h4>

        <ul>
            <li class="options">
                <p>
                    구매 옵션
                    <span>
                        @{
                        string HTL_DATE = "",
                        HTL_NAME = "",
                        HTL_ROOM = "";

                        string HTL_TXT = "";

                        foreach (object item in ViewBag.htlData)
                        {
                        HTL_DATE = "";
                        HTL_NAME = "";
                        HTL_ROOM = "";

                        try { HTL_DATE  = item.GetType().GetProperties()[0].GetValue(item, null).ToString(); } catch { }
                        try { HTL_NAME  = item.GetType().GetProperties()[1].GetValue(item, null).ToString(); } catch { }
                        try { HTL_ROOM  = item.GetType().GetProperties()[2].GetValue(item, null).ToString(); } catch { }

                        HTL_DATE = HTL_DATE.Split('-')[1] + "." + HTL_DATE.Split('-')[2];

                        HTL_TXT = HTL_ROOM + " " + HTL_NAME + " - " + HTL_ROOM + "<br />";

                        @HTL_TXT
                        }
                        }
                    </span>
                </p>
            </li>
            <li class="revCnt leftBorder">
                <p>
                    인원
                    <span>
                        성인 @ACnt 명<br />
                        소아 @CCnt 명<br />
                        유아 @BCnt 명
                    </span>
                </p>
            </li>
        </ul>
    </div>

    <div class="total">
        <p>
            합계
            <span>
                <span>@{@String.Format("{0:#,##0}", int.Parse(revPrice))}</span> 원
            </span>
        </p>
    </div>

    @if (ViewBag.accData != null)
    {

    <div class="record">
        <h4 class="sr-only sr-only-focusable">결제 내역</h4>

        <table class="table">
            <colgroup>
                <col style="width: 20%;" />
                <col style="width: 20%;" />
                <col style="width: 20%;" />
                <col style="width: 20%;" />
                <col style="width: 20%;" />
            </colgroup>
            <thead>
                <tr>
                    <th>입금고객</th>
                    <th>날짜</th>
                    <th>결제방법</th>
                    <th>구분</th>
                    <th>결제금액</th>
                </tr>
            </thead>
            <tbody>

                @{
                string REV_ACC_SEQ = "",
                REV_ACC_DATE = "",
                REV_ACC_REG_DATE = "",
                REV_ACC_IST_EMP_NO = "",
                REV_ACC_GB_CODE = "",
                REV_ACC_DET_SEQ = "",
                REV_ACC_PRICE = "",
                REV_ACC_NAME = "",
                REV_ACC_CONTENT = "";

                int totalPrice = 0;

                foreach (object item in ViewBag.accData)
                {

                try { REV_ACC_SEQ = item.GetType().GetProperties()[0].GetValue(item, null).ToString(); } catch { continue; }
                try { REV_ACC_DATE = item.GetType().GetProperties()[1].GetValue(item, null).ToString(); } catch { continue; }
                try { REV_ACC_REG_DATE = item.GetType().GetProperties()[2].GetValue(item, null).ToString(); } catch { continue; }
                try { REV_ACC_IST_EMP_NO = item.GetType().GetProperties()[3].GetValue(item, null).ToString(); } catch { continue; }
                try { REV_ACC_GB_CODE = item.GetType().GetProperties()[4].GetValue(item, null).ToString(); } catch { continue; }
                try { REV_ACC_DET_SEQ = item.GetType().GetProperties()[5].GetValue(item, null).ToString(); } catch { continue; }
                try { REV_ACC_PRICE = item.GetType().GetProperties()[6].GetValue(item, null).ToString(); } catch { continue; }
                try { REV_ACC_NAME = item.GetType().GetProperties()[7].GetValue(item, null).ToString(); } catch { continue; }
                try { REV_ACC_CONTENT = item.GetType().GetProperties()[8].GetValue(item, null).ToString(); } catch { continue; }

                totalPrice += int.Parse(REV_ACC_PRICE);

                <tr>
                    <td>@REV_ACC_NAME</td>
                    <td>@REV_ACC_DATE</td>
                    <td>@REV_ACC_GB_CODE</td>
                    <td>@REV_ACC_DET_SEQ</td>
                    <td>@{@String.Format("{0:#,##0}", int.Parse(REV_ACC_PRICE))} 원</td>
                </tr>
                }
                }
            </tbody>
        </table>
    </div>

    <div class="total rTotal">
        <h4 class="sr-only sr-only-focusable">총 결제 내역</h4>
        <ul>
            <li>
                <p>
                    총 입금 금액
                    <span>
                        <span>@{@String.Format("{0:#,##0}", totalPrice)}</span> 원
                    </span>
                </p>
            </li>
            <li class="leftBorder">
                <p>
                    미 입금 금액
                    <span>
                        <span>@{@String.Format("{0:#,##0}", int.Parse(revPrice) - totalPrice)}</span> 원
                    </span>
                </p>
            </li>
        </ul>
    </div>

    }

    @if (revState == "30" || revState == "40")
    {
    string ID = "",
    Name_kor = "",
    Address = "";

    int chkPrice = 0;// Total_Price - Account_Price;

    foreach (object item in ViewBag.memData)
    {
    ID = "";
    Name_kor = "";
    Address = "";

    try { ID = item.GetType().GetProperties()[1].GetValue(item, null).ToString(); }
    catch { }
    try { Name_kor = item.GetType().GetProperties()[0].GetValue(item, null).ToString(); }
    catch { }
    try { Address = item.GetType().GetProperties()[2].GetValue(item, null).ToString(); }
    catch { }
    }

    string rNum = ViewBag.rNum;

    if (string.IsNullOrEmpty(Address) || Address.Length < 1)
    {
    Address = "-";
    }


    <div class="payment">
        <h4 class="sr-only sr-only-focusable">결제 수단</h4>

        <p class="checkPay">
            결제 수단

            <ul class="nav nav-tabs" role="tablist">
                <li role="presentation" class="active"><a href="#account" aria-controls="account" role="tab" data-toggle="tab">계좌이체</a></li>
                <li role="presentation"><a href="#card" aria-controls="card" role="tab" data-toggle="tab" data-type="Card">신용카드</a></li>
                <li role="presentation"><a href="#tabipay" aria-controls="tabipay" role="tab" data-toggle="tab" data-type="tabipay">타비페이</a></li>
            </ul>
        </p>

        <div class="tab-content">
            <div role="tabpanel" class="tab-pane active" id="account">
                <div class="accountTransfer">
                    <p class="accountHolder">예금주 (주)엔타비글로벌</p> <!--.accountHolder-->
                    <p>우리은행 1006-901-267484</p>
                    <p>국민은행 947801-01-285353</p>
                    <p>부산은행 070-13-001512-3</p>
                </div> <!--.accountTransfer-->
            </div>
            <div role="tabpanel" class="tab-pane" id="card">
                @using (Html.BeginForm("approval", "Mypage", FormMethod.Post, new { @class = "pro_ok_box", name = "appForm", style = "padding:0;" }))
                {
                string depseq = DateTime.Now.ToString("yyyyMMddhhmmss");

                string receiveUrl = Request.Url.AbsoluteUri.Substring(0, Request.Url.AbsoluteUri.IndexOf(Request.Url.AbsolutePath)) + "/Mypage/Allat_receive";

                if (string.IsNullOrEmpty(Address.Trim()))
                {
                Address = "미입력";
                }

                @Html.Hidden("allat_shop_id", "ntabi1")
                @*@Html.Hidden("test_cross_key", "d0710c593beacf516164220fb7133a6f")*@
                @Html.Hidden("allat_order_no", revDay + "_" + revSeq + "_" + depseq)                                     @* 예약 번호 넣기 *@
                @Html.Hidden("allat_amt", 1000@*(rTPrice - price)*@)                                    @* 승인금액 *@
                @Html.Hidden("allat_pmember_id", @ID)                                                   @* 회원 ID *@
                @Html.Hidden("allat_product_cd", @pdtCode)                                         @* 상품 코드 *@
                @Html.Hidden("allat_product_nm", @pdtTitle)                                        @* 상품 명 *@
                @Html.Hidden("allat_buyer_nm", @Name_kor)                                               @* 결제자 성명 *@
                @Html.Hidden("allat_recp_nm", @Name_kor)                                                @* 수취인 성명 *@
                @Html.Hidden("allat_recp_addr", @Address)                                               @* 수취인 주소 *@
                @Html.Hidden("shop_receive_url", @receiveUrl)                                           @* 콜백 주소 *@
                @Html.Hidden("allat_enc_data")                                                          @* 오잉? *@

                @Html.Hidden("allat_card_yn", "Y")                                                      @* 카드 사용 여부 *@
                @Html.Hidden("allat_bank_yn", "N")                                                      @* 게좌이체 사용 여부 *@
                @Html.Hidden("allat_vbank_yn", "N")                                                     @* 무통장 결제 사용 여부 *@
                @Html.Hidden("allat_hp_yn", "N")                                                        @* 휴대폰 결제 사용 여부 *@
                @Html.Hidden("allat_ticket_yn", "N")                                                    @* 상품권 결제 사용 여부 *@

                @Html.Hidden("allat_encode_type", "U")                                                  @* UTF-8 사용 여부 *@

                @Html.Hidden("allat_test_yn", "N")                                                      @* 테스트 여부 *@

                @Html.Hidden("revDate", Request["d"])                                                @* 오잉? *@
                @Html.Hidden("revSeq", Request["k"])                                                  @* 오잉? *@
                @Html.Hidden("payType")

                <p class="accessPay">
                    <input type="number" name="dPrice" value="0" /> 원

                    <a href="javascript:ftn_approval(document.appForm);" class="btn btn-default">결제</a>
                </p>

                }
            </div>
        </div>
    </div>

    @*if (isMobile)
    {
    <script type="text/javascript" charset="utf-8" src="https://tx.allatpay.com/common/AllatPayM.js"></script>

    <script language=Javascript>
        // 결제페이지 호출
        function ftn_approval(dfm) {

            if (dfm.dPrice.value < 1000) {
                alert("1000 원 부터 결제가 가능합니다.");
                return;
            }

            var price = "@chkPrice";

            if (dfm.dPrice.value > price) {
                alert("결제 하시려는 금액을 다시 체크해주세요.");
                return;
            }

            var type = dfm.payType.value;

            type = $("input[name=payType]:checked").val();

            switch (type) {
                case "Card":
                    $(window).scrollTop(0)

                    dfm.allat_amt.value = dfm.dPrice.value;

                    Allat_Mobile_Approval(dfm, 0, 0);
                    break;
                case "tabipay":
                    dfm.shop_receive_url.value = "@Request.Url.AbsoluteUri.Substring(0, Request.Url.AbsoluteUri.IndexOf(Request.Url.AbsolutePath))" + "/Mypage/checkpay_acc";

                    dfm.action = "/Mypage/payApprove";
                    dfm.method = "post";
                    dfm.target = "_self";
                    dfm.submit();
                    break;
                default:
                    alert("결제 타입을 선택해주세요.");
                    break;
            }
        }

        // 결과값 반환( receive 페이지에서 호출 )
        function result_submit(result_cd, result_msg, enc_data) {

            Allat_Mobile_Close();

            if (result_cd != '0000') {
                alert(result_cd + " : " + result_msg);
            } else {

                var f = document.appForm;
                f.allat_enc_data.value = enc_data;

                f.action = "/Mypage/approval";
                f.method = "post";
                f.target = "_self";
                f.submit();
            }
        }
    </script>
    }
    else
    {
    <script language=JavaScript charset='euc-kr' src="https://tx.allatpay.com/common/NonAllatPayRE.js"></script>
    <script language=Javascript>
        // 결제페이지 호출
        function ftn_approval(dfm) {

            if (dfm.dPrice.value < 1000) {
                alert("1000 원 부터 결제가 가능합니다.");
                return;
            }

            var price = "@chkPrice";

            if (dfm.dPrice.value > price) {
                alert("결제 하시려는 금액을 다시 체크해주세요.\n(미 입금 금액보다 결제하시려는 금액이 큽니다.)");
                return;
            }

            var type = dfm.payType.value;

            type = $("input[name=payType]:checked").val();

            switch (type) {
                case "Card":
                    dfm.allat_amt.value = dfm.dPrice.value;

                    AllatPay_Approval(dfm);
                    // 결제창 자동종료 체크 시작
                    AllatPay_Closechk_Start();
                    break;
                case "tabipay":
                    dfm.shop_receive_url.value = "@Request.Url.AbsoluteUri.Substring(0, Request.Url.AbsoluteUri.IndexOf(Request.Url.AbsolutePath))" + "/Mypage/checkpay_acc";

                    dfm.action = "/Mypage/payApprove";
                    dfm.method = "post";
                    dfm.target = "_self";
                    dfm.submit();
                    break;
                default:
                    alert("결제 타입을 선택해주세요.");
                    break;
            }
        }

        // 결과값 반환( receive 페이지에서 호출 )
        function result_submit(result_cd, result_msg, enc_data) {

            // 결제창 자동종료 체크 종료
            AllatPay_Closechk_End();

            if (result_cd != '0000') {
                window.setTimeout(function () { alert(result_cd + " : " + result_msg); }, 1000);
            } else {
                var f = document.appForm;
                f.allat_enc_data.value = enc_data;

                f.action = "/Mypage/approval";
                f.method = "post";
                f.target = "_self";
                f.submit();
            }
        }
    </script>
    }*@



    }
</section>


<script language=JavaScript charset='euc-kr' src="https://tx.allatpay.com/common/NonAllatPayRE.js"></script>
<script language=Javascript>

    $("div.payment > ul.nav > li > a").on("click", function () {
        var _this = $(this);

        var type = _this.attr("data-type");

        if (type != "") {
            document.appForm.payType.value = type;
        }
    });

    // 결제페이지 호출
    function ftn_approval(dfm) {

        if (dfm.dPrice.value < 1000) {
            alert("1000 원 부터 결제가 가능합니다.");
            return;
        }

        @*var price = "@chkPrice";

        if (dfm.dPrice.value > price) {
            alert("결제 하시려는 금액을 다시 체크해주세요.\n(미 입금 금액보다 결제하시려는 금액이 큽니다.)");
            return;
        }*@

        var type = dfm.payType.value;

        type = $("input[name=payType]").val();

        switch (type) {
            case "Card":
                dfm.allat_amt.value = dfm.dPrice.value;

                AllatPay_Approval(dfm);
                // 결제창 자동종료 체크 시작
                AllatPay_Closechk_Start();
                break;
            case "tabipay":
                dfm.shop_receive_url.value = "@Request.Url.AbsoluteUri.Substring(0, Request.Url.AbsoluteUri.IndexOf(Request.Url.AbsolutePath))" + "/Mypage/checkpay_acc";

                dfm.action = "/Mypage/payApprove";
                dfm.method = "post";
                dfm.target = "_self";
                dfm.submit();
                break;
            default:
                alert("결제 타입을 선택해주세요.");
                break;
        }
    }

    // 결과값 반환( receive 페이지에서 호출 )
    function result_submit(result_cd, result_msg, enc_data) {

        // 결제창 자동종료 체크 종료
        AllatPay_Closechk_End();

        if (result_cd != '0000') {
            window.setTimeout(function () { alert(result_cd + " : " + result_msg); }, 1000);
        } else {
            var f = document.appForm;
            f.allat_enc_data.value = enc_data;

            f.action = "/Mypage/approval";
            f.method = "post";
            f.target = "_self";
            f.submit();
        }
    }
</script>